print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("ghtorrent_restore", "jbs3hp", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
# CREATE DB ACCOUNTS ----
# SDAD Staff
db_users_sdad <- data.table::fread("db/src/users_sdad.csv")[, uid]
db_users_dspg2019 <- data.table::fread("db/src/users_dspg2019.csv")[, uid]
# All Users
db_users <- c(db_users_dspg2019, db_users_sdad)
# Create users
source("db/src/db_create_user.R")
# Create users
source("db/src/db_create_user.R")
for (dbu in db_users) {
create_db_user(dbu, db_host = "postgis_2")
}
# Grant all permissions on grant_database to grant_user
source("db/src/db_grant_permissions.R")
# Grant all permissions on grant_database to grant_user
source("db/src/db_grant_permissions.R")
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "gis", schema = "census_cb", db_host = "postgis_2")
}
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")
}
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "corelogic", schema = "public", db_host = "postgis_2")
}
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions("kb7hp", "ghtorrent_restore", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "kb7hp", grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions(grant_username = "jbs3hp", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "dtn2ep", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "nr3xe", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "sc2pg", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions(grant_username = "kb7hp", grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")
source("db/src/db_grant_permissions.R")
grant_db_permissions(grant_username = "dtn2ep", grant_database = "gis", schema = "census_cb", db_host = "postgis_1")
grant_db_permissions(grant_username = "dtn2ep", grant_database = "gis", schema = "census_tl", db_host = "postgis_1")
# EXTERNAL Staff
db_users_sdad <- data.table::fread("db/src/users_external.csv")[, uid]
db_users_sdad
db_users_sdad <- data.table::fread("db/src/users_sdad.csv")[, uid]
# EXTERNAL Staff
db_users_external <- data.table::fread("db/src/users_external.csv")[, uid]
# DSPG Students
db_users_dspg2019 <- data.table::fread("db/src/users_dspg2019.csv")[, uid]
# All Users
db_users <- c(db_users_sdad, db_users_external, db_users_dspg2019)
groups <- jsonlite::read_json("db/data/projects.json")
groups
projects <- jsonlite::read_json("db/data/projects.json")
length(projects)
for (i in 1:length(projects)) {
print(projects[i])
}
for (i in 1:length(projects)) {
print(projects[[i]])
}
for (i in 1:length(projects)) {
print(projects[1])
}
for (i in 1:length(projects)) {
print(projects[i][1])
}
projects[1]
projects[1][1]
projects[[1]]
projects[[1]][1]
projects[[1]][[1]]
projects[[1]]$project
for (i in 1:length(projects)) {
print(projects[[i]]$project)
}
projects[[1]]$members
projects[[1]]$members[1]
projects[[1]]$members[[1]]
for (i in 1:length(projects)) {
project_name <- projects[[i]]$project
print(project_name)
for (j in 1:length(projects[[i]]$members)) {
print(projects[[i]]$members[[j]])
}
}
for (i in 1:length(projects)) {
for (j in 1:length(projects[[i]]$members)) {
print(projects[[i]]$project)
print(projects[[i]]$members[[j]])
}
}
for (i in 1:length(projects)) {
print(projects[[i]]$project)
for (j in 1:length(projects[[i]]$members)) {
print(projects[[i]]$members[[j]])
}
}
source("db/src/db_connection.R")
con <- get_db_conn()
for (i in 1:length(projects)) {
group <- projects[[i]]$project
create_group_sql <- paste0("CREATE GROUP ", group)
DBI::dbSendQuery(con, create_group_sql)
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbSendQuery(con, assign_group_sql)
}
}
con <- get_db_conn()
for (i in 1:length(projects)) {
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbSendQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
DBI::dbSendQuery(con, create_group_sql)
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbSendQuery(con, assign_group_sql)
}
}
DBI::dbDisconnect(con)
con <- get_db_conn()
for (i in 1:length(projects)) {
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbGetQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
DBI::dbGetQuery(con, create_group_sql)
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
if (user_exists_sql != 1) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
}
}
DBI::dbDisconnect(con)
i=1
j=1
projects <- jsonlite::read_json("db/data/projects.json")
con <- get_db_conn()
user <- projects[[i]]$members[[j]]
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
View(user_exists)
user_exists
user_exists[, 1]
if (user_exists[, 1] != 1) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
if (user_exists[, 1] != 1) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
}
con <- get_db_conn()
for (i in 1:length(projects)) {
# DROP (IF EXISTS) AND CREATE DB GROUP
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbGetQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
DBI::dbGetQuery(con, create_group_sql)
# ASSIGN USERS TO DB GROUP
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
# CREATE USER IF NOT EXISTS
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
if (user_exists[, 1] != 1) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
# ASSIGN USER TO GROUP
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
}
}
DBI::dbDisconnect(con)
con <- get_db_conn()
user_exists <- DBI::dbGetQuery(con, "select 1 from pg_roles where rolename='booboo'")
user_exists <- DBI::dbGetQuery(con, "select 1 from pg_roles where rolname='booboo'")
nrow(user_exists)
DBI::dbDisconnect(con)
con <- get_db_conn()
for (i in 1:length(projects)) {
# DROP (IF EXISTS) AND CREATE DB GROUP
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbGetQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
DBI::dbGetQuery(con, create_group_sql)
# ASSIGN USERS TO DB GROUP
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
# CREATE USER IF NOT EXISTS
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
if (nrow(user_exists) == 0) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
# ASSIGN USER TO GROUP
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
}
}
DBI::dbDisconnect(con)
con <- get_db_conn()
t <- DBI::dbGetQuery(con, "create group testgroup1")
t
t <- DBI::dbGetQuery(con, "create group testgroup1")
t
con <- get_db_conn()
t <- DBI::dbSendQuery(con, "create group testgroup1")
t
t
t <- DBI::dbSendQuery(con, "drop group testgroup1")
t <- DBI::dbSendQuery(con, "create group testgroup1")
t
t <- DBI::dbSendQuery(con, "drop group testgroup1")
t <- DBI::dbGetQuery(con, "create group testgroup1")
t
View(t)
is.null(t)
t <- DBI::dbSendQuery(con, "drop group testgroup1")
t <- DBI::dbSendQuery(con, "create group testgroup1")
is.null(t)
t
t <- DBI::dbSendQuery(con, "create group testgroup1")
is.null(t)
t
t <- DBI::dbSendQuery(con, "drop group testgroup1")
t <- DBI::dbGetQuery(con, "create group testgroup1")
t <- DBI::dbGetQuery(con, "create group testgroup1")
t
con <- get_db_conn()
for (i in 1:length(projects)) {
# DROP (IF EXISTS) AND CREATE DB GROUP
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbGetQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
create_group_result <- DBI::dbGetQuery(con, create_group_sql)
if (is.null(create_group_result) == TRUE) {
print("PROBLEM WITH CREATE GROUP")
} else {
print(paste0("Creation of group ", group, " successful!"))
}
# ASSIGN USERS TO DB GROUP
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
# CREATE USER IF NOT EXISTS
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
if (nrow(user_exists) == 0) {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
DBI::dbGetQuery(con, create_user_sql)
}
# ASSIGN USER TO GROUP
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
DBI::dbGetQuery(con, assign_group_sql)
}
}
DBI::dbDisconnect(con)
source("db/src/db_connection.R")
projects <- jsonlite::read_json("db/data/projects.json")
con <- get_db_conn()
for (i in 1:length(projects)) {
# DROP (IF EXISTS) AND CREATE DB GROUP
group <- projects[[i]]$project
drop_group_sql <- paste0("DROP GROUP IF EXISTS ", group)
DBI::dbGetQuery(con, drop_group_sql)
create_group_sql <- paste0("CREATE GROUP ", group)
create_group_result <- DBI::dbGetQuery(con, create_group_sql)
if (is.null(create_group_result) == TRUE) {
print("PROBLEM WITH CREATE GROUP")
} else {
print(paste0("Creation of group ", group, " successful!"))
}
# ASSIGN USERS TO DB GROUP
for (j in 1:length(projects[[i]]$members)) {
user <- projects[[i]]$members[[j]]
# CREATE USER IF NOT EXISTS
user_exists_sql <- paste0("SELECT 1 FROM pg_roles WHERE rolname='", user, "'")
user_exists <- DBI::dbGetQuery(con, user_exists_sql)
if (nrow(user_exists) > 0) {
print(paste0("User ", user, " already exists."))
} else {
create_user_sql <- paste0("CREATE USER ", user," WITH PASSWORD '", user, "'")
create_user_result <- DBI::dbGetQuery(con, create_user_sql)
if (is.null(create_group_result) == TRUE) {
print("PROBLEM WITH CREATE USER")
} else {
print(paste0("Creation of user ", user, " successful!"))
}
}
# ASSIGN USER TO GROUP
assign_group_sql <- paste0("GRANT ", group, " TO ", user)
assign_group_result <- DBI::dbGetQuery(con, assign_group_sql)
if (is.null(assign_group_result) == TRUE) {
print("PROBLEM WITH ASSIGN USER")
} else {
print(paste0("User ", user, " assigned to group ", group))
}
}
}
DBI::dbDisconnect(con)
source("db/src/db_connection.R")
projects <- jsonlite::read_json("db/data/projects.json")
projects <- jsonlite::read_json("db/data/projects.json")
k=1
schema <- projects[[i]]$schemas[[k]]
# CREATE SCHEMA IF NOT EXISTS
schema_create_sql <- paste0("CREATE SCHEMA IF NOT EXISTS ", schema)
create_schema_result <- DBI::dbGetQuery(con, schema_create_sql)
con <- get_db_conn()
create_schema_result <- DBI::dbGetQuery(con, schema_create_sql)
# ASSIGN PERMISSIONS
schema_permissions_sql <- paste0("GRANT ALL ON SCHEMA ", schema, " TO ", group)
schema_permissions_result <- DBI::dbGetQuery(con, schema_permissions_sql)
schema_table_permissions_sql <- paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema, " TO ", group)
schema_table_permissions_result <- DBI::dbGetQuery(con, schema_table_permissions_sql)
v <- "`08001`|`R0063935`|`1`|`R0063935`|`R0063935`|``|`R0063935`|`R0063935`|`223-K`|``|`0096031015`|`2`|`3`|`68W`|`02S`|`31`|`NE`|``|`163`|`1212`|``|``|``|`10`|``|``|``|``|``|`VALENTES`|``|`4032`|``|``|`W`|`77TH`|`PL`|``|``|`WESTMINSTER`|`CO`|`800304501`|`C028`|``|`RAMIREZ`|`SANTIAGO`|``|``|`A`|``|``|``|``|``|`10456`|``|``|``|`URA`|`LN`|``|``|`NORTHGLENN`|`CO`|`802343646`|`C051`|``|`150966`|`30000`|`120966`|`M`|`M`|`M`|`12020`|`2390`|`9630`|`150966`|`30000`|`120966`|``|``|``|`1179.64`|`2011`|`20120000`|`555`|`60.0000`|`110.0000`|`.1500`|`6600`|`1814`|`L`|`1998`|`1814.00`|`1414.00`|``|`1814.00`|``|`184.00`|`1953`|`1975`|`4`|`6`|`2.00`|`2.00`|``|``|``|``|``|`ACE`|``|``|`R00`|``|`AVE`|`FRY`|`FMV`|``|``|``|``|``|``|`450`|`FA0`|``|``|``|``|`QAV`|`015`|`I00`|``|`2.00`|`000`|``|``|`1`|``|``|``|``|``|``|`SUB:VALENTES SUBD BLK:2 LOT:3`|``|``"
stringr::str_count(v, "|")
v
stringr::str_count(v, "8")
stringr::str_count(v, "\\|")
x <- "`08001`|`R0005862`|`1`|`R0005862`|`R0005862`|``|`R0005862`|`R0005862`|`138-Q`|``|`0086051017`|`6`|`12`|`66W`|`01S`|`08`|`NW`|``|`163`|`1212`|``|``|``|`10`|``|``|``|``|``|`SHERATON PARK AMD`|``|`151`|``|``|`S`|`16TH AVENUE`|`DR`|``|``|`BRIGHTON`|`CO`|`806012311`|`C008`|``|`HUSS`|`MARK A`|`HUSS`|``|`O`|``|``|`JT`|``|``|`151`|``|``|`S`|`16TH AVENUE`|`DR`|``|``|`BRIGHTON`|`CO`|`806012311`|`C008`|``|`159437`|`31000`|`128437`|`M`|`M`|`M`|`12690`|`2470`|`10220`|`159437`|`31000`|`128437`|``|``|``|`1207.60`|`2011`|`20120000`|`316`|`70.0000`|`110.0000`|`.1800`|`7700`|`2072`|`L`|`3668`|`2072.00`|`1092.00`|``|`2184.00`|`1092.00`|`392.00`|`1962`|`1962`|`3`|`5`|`2.00`|`2.00`|``|``|``|``|``|`ACE`|`FFI`|`001`|`R00`|``|`AVE`|`FRY`|`FMV`|`Y`|`1`|`1U0`|``|``|``|`450`|`FA0`|``|``|``|``|`QAV`|`015`|`G00`|``|`1.00`|`000`|``|``|`1`|``|``|``|``|``|``|`SUB:SHERATON PARK AMENDED BLK:6 LOT:12`|``|``"
stringr::str_count(x, "\\|")
v <- "`08001`|`R0063935`|`1`|`R0063935`|`R0063935`|``|`R0063935`|`R0063935`|`223-K`|``|`0096031015`|`2`|`3`|`68W`|`02S`|`31`|`NE`|``|`163`|`1212`|``|``|``|`10`|``|``|``|``|``|`VALENTES`|``|`4032`|``|``|`W`|`77TH`|`PL`|``|``|`WESTMINSTER`|`CO`|`800304501`|`C028`|``|`RAMIREZ`|`SANTIAGO`|``|``|`A`|``|``|``|``|``|`10456`|``|``|``|`URA`|`LN`|``|``|`NORTHGLENN`|`CO`|`802343646`|`C051`|``|`150966`|`30000`|`120966`|`M`|`M`|`M`|`12020`|`2390`|`9630`|`150966`|`30000`|`120966`|``|``|``|`1179.64`|`2011`|`20120000`|`555`|`60.0000`|`110.0000`|`.1500`|`6600`|`1814`|`L`|`1998`|`1814.00`|`1414.00`|``|`1814.00`|``|`184.00`|`1953`|`1975`|`4`|`6`|`2.00`|`2.00`|``|``|``|``|``|`ACE`|``|``|`R00`|``|`AVE`|`FRY`|`FMV`|``|``|``|``|``|``|`450`|`FA0`|``|``|``|``|`QAV`|`015`|`I00`|``|`2.00`|`000`|``|``|`1`|``|``|``|``|``|``|`SUB:VALENTES SUBD BLK:2 LOT:3`|``|``"
stringr::str_count(v, "`")
stringr::str_count(x, "\\|")
stringr::str_count(x, "`")
devtools::install_github('jbryer/DTedit')
library(RSQLite)
install.packages('RSQLite')
library(RSQLite)
library(shiny)
library(DTedit)
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
##### Load books data.frame as a SQLite database
conn <- dbConnect(RSQLite::SQLite(), "books.sqlite")
dbListTables(conn)
!'names' %in% dbListTables(conn)
if(!'names' %in% dbListTables(conn)) {
names <- data.frame(Name=character(), Email=character(), Date=character(),
Type = factor(levels=c('Admin', 'User')),
stringsAsFactors=FALSE)
dbWriteTable(conn, "names", names, overwrite = TRUE)
}
!'names' %in% dbListTables(conn)
dbListTables(conn)
getNames <- function() {
res <- dbSendQuery(conn, "SELECT * FROM names")
names <- dbFetch(res)
dbClearResult(res)
names$Date <- as.Date(names$Date)
names$Type <- as.factor(names$Type)
return(names)
}
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
data
row
query
runApp('~/git/DTedit/inst/shiny_demo')
getNames()
max(getNames()$id)
nrow(getNames())
runApp('~/git/DTedit/inst/shiny_demo')
runApp('~/git/DTedit/inst/shiny_demo')
##### Load books data.frame as a SQLite database
conn <- dbConnect(RSQLite::SQLite(), "books.sqlite")
'names' %in% dbListTables(conn)
dbGetQuery(conn, "select * from names")
dbGetQuery(conn, "drop table names")
'names' %in% dbListTables(conn)
if(!'names' %in% dbListTables(conn)) {
names <- data.frame(id=numeric(),
Name=character(),
Email=character(),
Date=character(),
Type = factor(levels=c('Admin', 'User')),
stringsAsFactors=FALSE)
dbWriteTable(conn, "names", names, overwrite = TRUE)
}
'names' %in% dbListTables(conn)
dbGetQuery(conn, "select * from names")
dbGetQuery(conn, "INSERT INTO names (id, Name, Email, Date, Type) VALUES (1, 'Aaron Schroeder', 'dads2busy@gmail.com', '11/13/1968', 'Admin' )")
dbGetQuery(conn, "select * from names")
dbGetQuery(conn, "drop table names")
dbGetQuery(conn, "select * from names")
runApp('~/git/DTedit/inst/shiny_demo')
dbGetQuery(conn, "select * from names")
dbDisconnect(conn)
source("db/src/db_connection.R")
# DB Info Functions
list_db_schemas <- function(db_con) {
DBI::dbGetQuery(db_con, "select schema_name from information_schema.schemata")
DBI::dbDisconnect(db_con)
}
list_schema_tables <- function(db_con, db_schema) {
DBI::dbGetQuery(db_con, paste0("SELECT table_name FROM information_schema.tables
WHERE table_schema='", db_schema, "'"))
DBI::dbDisconnect(db_con)
}
list_table_columns <- function(db_con, db_schema, db_table) {
DBI::dbGetQuery(db_con, paste0("SELECT table_schema, table_name, column_name, data_type
FROM information_schema.columns
WHERE table_schema = '", db_schema, "'",
" AND table_name = '", db_table, "'"))
DBI::dbDisconnect(db_con)
}
# List Schemas
con <- get_db_conn()
list_db_schemas(con)
list_db_schemas(con)
# List Schemas
con <- get_db_conn()
list_db_schemas(con)
list_db_schemas <- function(db_con) {
result <- DBI::dbGetQuery(db_con, "select schema_name from information_schema.schemata")
DBI::dbDisconnect(db_con)
return(result)
}
list_schema_tables <- function(db_con, db_schema) {
result <- DBI::dbGetQuery(db_con, paste0("SELECT table_name FROM information_schema.tables
WHERE table_schema='", db_schema, "'"))
DBI::dbDisconnect(db_con)
return(result)
}
list_table_columns <- function(db_con, db_schema, db_table) {
result <- DBI::dbGetQuery(db_con, paste0("SELECT table_schema, table_name, column_name, data_type
FROM information_schema.columns
WHERE table_schema = '", db_schema, "'",
" AND table_name = '", db_table, "'"))
DBI::dbDisconnect(db_con)
return(result)
}
# List Schemas
con <- get_db_conn()
list_db_schemas(con)
# List Tables in a Schema
con <- get_db_conn()
list_schema_tables(con, "burning_glass_jobs")
# List Columns in a Table
con <- get_db_conn()
list_table_columns(con, "burning_glass_jobs", "Skills_2017-12")
# DB Functions
get_db_conn <-
function(db_name = "sdad",
db_host = "postgis1",
db_port = "5432",
db_user = Sys.getenv("db_userid"),
db_pass = Sys.getenv("db_pwd")) {
RPostgreSQL::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
}
list_db_schemas <- function(db_con) {
result <- DBI::dbGetQuery(db_con, "select schema_name from information_schema.schemata")
DBI::dbDisconnect(db_con)
return(result)
}
con <- get_db_conn()
list_db_schemas(con)
library(shiny); runApp('copy-app.R')
install.packages("shinythemes")
library(shiny); runApp('copy-app.R')
responses <- read.csv("data-discovery-feb-3.csv", sep = ",",stringsAsFactors = FALSE, header=TRUE, encoding="UTF-8")
View(responses)
runApp('copy-app.R')
